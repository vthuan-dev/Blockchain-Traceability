export default command;
export type BlockCodec<T> = import('multiformats/codecs/interface').BlockCodec<number, T>;
export type Argv = {
    ctx: import('../../types').Context;
    data: string;
    inputCodec: 'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw';
    storeCodec: 'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw';
    cidVersion: import('multiformats/cid').Version;
    pin: boolean;
    hashAlg: string;
    cidBase: string;
    preload: boolean;
    onlyHash: boolean;
    timeout: number;
};
/**
 * @typedef {object} Argv
 * @property {import('../../types').Context} Argv.ctx
 * @property {string} Argv.data
 * @property {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} Argv.inputCodec
 * @property {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} Argv.storeCodec
 * @property {import('multiformats/cid').Version} Argv.cidVersion
 * @property {boolean} Argv.pin
 * @property {string} Argv.hashAlg
 * @property {string} Argv.cidBase
 * @property {boolean} Argv.preload
 * @property {boolean} Argv.onlyHash
 * @property {number} Argv.timeout
 */
/** @type {import('yargs').CommandModule<Argv, Argv>} */
declare const command: import('yargs').CommandModule<Argv, Argv>;
//# sourceMappingURL=put.d.ts.map