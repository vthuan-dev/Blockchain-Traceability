/**
 * @param {{ api?: string, silent?: boolean, migrate?: boolean, pass?: string }} argv
 */
export function getIpfs(argv: {
    api?: string;
    silent?: boolean;
    migrate?: boolean;
    pass?: string;
}): Promise<{
    isDaemon: boolean;
    ipfs: import("ipfs-core-types").IPFS<any>;
    cleanup: () => Promise<void>;
}>;
export function getRepoPath(): string;
export function isDaemonOn(): boolean;
export function disablePrinting(): void;
/**
 * @type {import('./types').Print}
 */
export const print: import('./types').Print;
export function createProgressBar(totalBytes: number, output?: any): Progress;
export function rightpad(val: any, n: number): string;
export const ipfsPathHelp: "ipfs uses a repository in the local file system. By default, the repo is located at ~/.jsipfs. To change the repo location, set the $IPFS_PATH environment variable: `export IPFS_PATH=/path/to/ipfsrepo`";
export function asBoolean(value?: boolean | undefined): boolean;
export function asOctal(value: any): number;
export function asMtimeFromSeconds(secs?: number | undefined, nsecs?: number | undefined): {
    secs: number;
    nsecs: number | undefined;
} | undefined;
export function coerceMtime(value: any): any;
export function coerceMtimeNsecs(value: any): any;
export function coerceCID(value: any): CID<unknown, number, number, import("multiformats/cid").Version> | undefined;
export function coerceCIDs(values: string[]): (CID<unknown, number, number, import("multiformats/cid").Version> | undefined)[];
export function coercePeerId(value?: string | undefined): import("@libp2p/interface-peer-id").PeerId | undefined;
export function coerceMultiaddr(value: string): import("@multiformats/multiaddr").Multiaddr | undefined;
export function coerceMultiaddrs(values: string[]): (import("@multiformats/multiaddr").Multiaddr | undefined)[] | undefined;
export function coerceUint8Array(value: string): Uint8Array | undefined;
export function stripControlCharacters(str?: string | undefined): string;
export function escapeControlCharacters(str: string): string;
export function makeEntriesPrintable(obj: any, cidBase: import('multiformats/bases/interface').MultibaseCodec<any>): any;
import Progress from "progress";
import { CID } from "multiformats/cid";
//# sourceMappingURL=utils.d.ts.map