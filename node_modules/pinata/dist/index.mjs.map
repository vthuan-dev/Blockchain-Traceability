{"version":3,"sources":["../src/utils/custom-errors.ts","../src/core/authentication/testAuthentication.ts","../src/core/pinning/file.ts","../src/core/pinning/fileArray.ts","../src/core/pinning/base64.ts","../src/core/pinning/url.ts","../src/core/pinning/json.ts","../src/core/pinning/cid.ts","../src/core/pinning/unpin.ts","../src/core/data/listFiles.ts","../src/core/data/updateMetadata.ts","../src/utils/gateway-tools.ts","../src/core/gateway/getCid.ts","../src/core/gateway/convertIPFSUrl.ts","../src/core/data/pinJobs.ts","../src/core/data/pinnedFileUsage.ts","../src/core/data/totalStorageUsage.ts","../src/core/keys/createKey.ts","../src/core/keys/listKeys.ts","../src/core/keys/revokeKeys.ts","../src/core/groups/createGroup.ts","../src/core/groups/listGroups.ts","../src/core/groups/getGroup.ts","../src/core/groups/addToGroup.ts","../src/core/groups/updateGroup.ts","../src/core/groups/removeFromGroup.ts","../src/core/groups/deleteGroup.ts","../src/core/signatures/addSignature.ts","../src/core/signatures/getSignature.ts","../src/core/signatures/removeSignature.ts","../src/core/gateway/analyticsTopUsage.ts","../src/core/gateway/analyticsDateInterval.ts","../src/core/gateway/swapCid.ts","../src/core/gateway/swapHistory.ts","../src/core/gateway/deleteSwap.ts","../src/core/pinataSDK.ts"],"sourcesContent":["export class PinataError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic statusCode?: number,\n\t\tpublic details?: any,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = \"PinataError\";\n\t}\n}\n\nexport class NetworkError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: any) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"NetworkError\";\n\t}\n}\n\nexport class AuthenticationError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: any) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"AuthenticationError\";\n\t}\n}\n\nexport class ValidationError extends PinataError {\n\tconstructor(message: string, details?: any) {\n\t\tsuper(message, undefined, details);\n\t\tthis.name = \"ValidationError\";\n\t}\n}\n","/**\n * Tests the authentication of the current Pinata configuration.\n *\n * This function sends a request to the Pinata API to verify if the provided\n * authentication credentials (JWT) are valid and working correctly.\n *\n * @async\n * @function testAuthentication\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @returns {Promise<AuthTestResponse>} A promise that resolves to an object containing a message about the authentication status.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the authentication process.\n * @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *\n *  const auth = await pinata.testAuthentication()\n */\n\nimport type { PinataConfig, AuthTestResponse } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const testAuthentication = async (config: PinataConfig | undefined) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/testAuthentication\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/testAuthentication`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: AuthTestResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing authentication: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while testing authentication\",\n\t\t);\n\t}\n};\n","/**\n * Uploads a file to IPFS via Pinata.\n *\n * This function allows you to upload a single file to IPFS and pin it to Pinata.\n * It's useful for adding individual files to your Pinata account and IPFS network.\n *\n * @async\n * @function uploadFile\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {File} file - The file object to be uploaded.\n * @param {UploadOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the uploaded file.\n * @param {string} [options.metadata.name] - Custom name for the file (defaults to the original filename if not provided).\n * @param {Record<string, string | number>} [options.metadata.keyValues] - Custom key-value pairs for the file metadata.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the uploaded file to.\n * @param {0 | 1} [options.cidVersion] - Version of CID to use (0 or 1).\n * @returns {Promise<PinResponse>} A promise that resolves to an object containing the IPFS hash and other upload details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the upload process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const file = new File([\"hello world!\"], \"hello.txt\", { type: \"text/plain\" })\n * const upload = await pinata.upload.file(file)\n */\n\nimport type { PinataConfig, PinResponse, UploadOptions } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadFile = async (\n\tconfig: PinataConfig | undefined,\n\tfile: File,\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config.pinataJwt;\n\n\tconst data = new FormData();\n\tdata.append(\"file\", file, file.name);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tcidVersion: options?.cidVersion,\n\t\t\tgroupId: options?.groupId,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: options?.metadata?.name || file.name || \"File from SDK\",\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/file\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\t\tconst res: PinResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error uploading file: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading the file\");\n\t}\n};\n","/**\n * Uploads multiple files to IPFS via Pinata as a single directory.\n *\n * This function allows you to upload multiple files to IPFS and pin them to Pinata\n * as a single directory. It's useful for adding collections of related files or\n * entire directories to your Pinata account and IPFS network.\n *\n * @async\n * @function uploadFileArray\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {File[]} files - An array of File objects to be uploaded.\n * @param {UploadOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the uploaded directory.\n * @param {string} [options.metadata.name] - Name for the directory (defaults to \"folder_from_sdk\" if not provided).\n * @param {Record<string, string | number>} [options.metadata.keyValues] - Custom key-value pairs for the directory metadata.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the uploaded directory to.\n * @param {0 | 1} [options.cidVersion] - Version of CID to use (0 or 1).\n * @returns {Promise<PinResponse>} A promise that resolves to an object containing the IPFS hash and other upload details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the upload process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const file1 = new File([\"hello world!\"], \"hello.txt\", { type: \"text/plain\" })\n * const file2 = new File([\"hello world again!\"], \"hello2.txt\", { type: \"text/plain\" })\n * const upload = await pinata.upload.fileArray([file1, file2])\n */\n\nimport type { PinataConfig, PinResponse, UploadOptions } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadFileArray = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: File[],\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst folder = options?.metadata?.name || \"folder_from_sdk\";\n\tconst data = new FormData();\n\n\tfor (const file of Array.from(files)) {\n\t\tdata.append(\"file\", file, `${folder}/${file.name}`);\n\t}\n\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: folder,\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tcidVersion: options?.cidVersion,\n\t\t\tgroupId: options?.groupId,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/fileArray\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing fileArray: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while uploading an array of files\",\n\t\t);\n\t}\n};\n","/**\n * Uploads a base64-encoded string to IPFS via Pinata.\n *\n * This function allows you to upload content to IPFS that is encoded as a base64 string.\n * It's particularly useful for uploading binary data or files that have been converted to base64.\n *\n * @async\n * @function uploadBase64\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} base64String - The base64-encoded string to be uploaded.\n * @param {UploadOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the uploaded file.\n * @param {string} [options.metadata.name] - Name for the uploaded file (default is \"base64 string\").\n * @param {Record<string, string | number>} [options.metadata.keyvalues] - Custom key-value pairs for the file metadata.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the uploaded file to.\n * @param {0 | 1} [options.cidVersion] - Version of CID to use (0 or 1).\n * @returns {Promise<PinResponse>} A promise that resolves to an object containing the IPFS hash and other upload details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the upload process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const upload = await pinata.upload.base64(\"SGVsbG8gV29ybGQh\")\n */\n\nimport type { PinataConfig, PinResponse, UploadOptions } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadBase64 = async (\n\tconfig: PinataConfig | undefined,\n\tbase64String: string,\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst name = options?.metadata?.name\n\t\t? options?.metadata?.name\n\t\t: \"base64 string\";\n\n\tconst buffer = Buffer.from(base64String, \"base64\");\n\n\tconst blob = new Blob([buffer]);\n\n\tconst data = new FormData();\n\n\tdata.append(\"file\", blob, name);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tcidVersion: options?.cidVersion,\n\t\t\tgroupId: options?.groupId,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: name,\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/base64\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t);\n\t}\n};\n","/**\n * Uploads content from a URL to IPFS via Pinata.\n *\n * This function allows you to upload content from a specified URL to IPFS and pin it to Pinata.\n * It's useful for adding remote content to your Pinata account and IPFS network without\n * first downloading it locally.\n *\n * @async\n * @function uploadUrl\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} url - The URL of the content to be uploaded.\n * @param {UploadOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the uploaded content.\n * @param {string} [options.metadata.name] - Custom name for the content (defaults to \"url_upload\" if not provided).\n * @param {Record<string, string | number>} [options.metadata.keyValues] - Custom key-value pairs for the content metadata.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the uploaded content to.\n * @param {0 | 1} [options.cidVersion] - Version of CID to use (0 or 1).\n * @returns {Promise<PinResponse>} A promise that resolves to an object containing the IPFS hash and other upload details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request or URL fetch.\n * @throws {PinataError} For any other errors that occur during the upload process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const upload = await pinata.upload.url(\"https://i.imgur.com/u4mGk5b.gif\")\n */\n\nimport type { PinataConfig, PinResponse, UploadOptions } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\tconst data = new FormData();\n\n\tconst stream = await fetch(url);\n\n\tif (!stream.ok) {\n\t\tconst errorData = await stream.text();\n\t\tthrow new NetworkError(\n\t\t\t`HTTP error: ${errorData}`,\n\t\t\tstream.status,\n\t\t\terrorData,\n\t\t);\n\t}\n\n\tconst arrayBuffer = await stream.arrayBuffer();\n\n\tconst blob = new Blob([arrayBuffer]);\n\n\tconst name = options?.metadata?.name ?? \"url_upload\";\n\n\tconst file = new File([blob], name);\n\n\tdata.append(\"file\", file, name);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tcidVersion: options?.cidVersion,\n\t\t\tgroupId: options?.groupId,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: name,\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/url\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing url: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading by url\");\n\t}\n};\n","/**\n * Uploads JSON data to IPFS via Pinata.\n *\n * This function allows you to upload JSON data directly to IPFS and pin it to Pinata.\n * It's useful for adding structured data, configurations, or any JSON-serializable content\n * to your Pinata account and IPFS network.\n *\n * @async\n * @function uploadJson\n * @template T\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {T} jsonData - The JSON data to be uploaded. Must be a valid JavaScript object that can be JSON-stringified.\n * @param {UploadOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the uploaded JSON.\n * @param {string} [options.metadata.name] - Custom name for the JSON content (defaults to \"json\" if not provided).\n * @param {Record<string, string | number>} [options.metadata.keyValues] - Custom key-value pairs for the JSON metadata.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the uploaded JSON to.\n * @param {0 | 1} [options.cidVersion] - Version of CID to use (0 or 1).\n * @returns {Promise<PinResponse>} A promise that resolves to an object containing the IPFS hash and other upload details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the upload process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const upload = await pinata.upload.json({\n *   name: \"Pinnie NFT\",\n *   description: \"A Pinnie NFT from Pinata\",\n *   image: \"ipfs://bafkreih5aznjvttude6c3wbvqeebb6rlx5wkbzyppv7garjiubll2ceym4\"\n * })\n */\n\nimport type {\n\tPinataConfig,\n\tPinResponse,\n\tUploadOptions,\n\tJsonBody,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadJson = async <T extends JsonBody>(\n\tconfig: PinataConfig | undefined,\n\tjsonData: T,\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst data = JSON.stringify({\n\t\tpinataContent: jsonData,\n\t\tpinataOptions: {\n\t\t\tcidVersion: options?.cidVersion,\n\t\t\tgroupId: options?.groupId,\n\t\t},\n\t\tpinataMetadata: {\n\t\t\tname: options?.metadata?.name || \"json\",\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t},\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/json\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinJSONToIPFS`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing json: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading json\");\n\t}\n};\n","/**\n * Pins an existing file on IPFS to Pinata using its Content Identifier (CID).\n *\n * This function allows you to add an existing IPFS file to your Pinata account\n * by providing its CID. It's useful for ensuring long-term storage and\n * availability of content that's already on IPFS.\n *\n * @async\n * @function uploadCid\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} cid - The Content Identifier (CID) of the IPFS file to pin.\n * @param {UploadCIDOptions} [options] - Optional parameters for the upload.\n * @param {PinataMetadata} [options.metadata] - Metadata for the pinned file.\n * @param {string} [options.metadata.name] - Name for the pinned file (defaults to the CID if not provided).\n * @param {Record<string, string | number>} [options.metadata.keyValues] - Custom key-value pairs for the file metadata.\n * @param {string[]} [options.peerAddresses] - Array of peer addresses to contact for pinning.\n * @param {string} [options.keys] - Custom JWT to use for this specific upload.\n * @param {string} [options.groupId] - ID of the group to add the pinned file to.\n * @returns {Promise<PinByCIDResponse>} A promise that resolves to an object containing details about the pinning job.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the pinning process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const pin = await pinata.upload.cid(\"QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\")\n */\n\nimport type {\n\tPinataConfig,\n\tPinByCIDResponse,\n\tUploadCIDOptions,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const uploadCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\toptions?: UploadCIDOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/cid\",\n\t\t};\n\t}\n\n\tconst data = JSON.stringify({\n\t\thashToPin: cid,\n\t\tpinataMetadata: {\n\t\t\tname: options?.metadata ? options?.metadata?.name : cid,\n\t\t\tkeyvalues: options?.metadata?.keyValues,\n\t\t},\n\t\tpinataOptions: {\n\t\t\thostNodes: options?.peerAddresses ? options.peerAddresses : \"\",\n\t\t\tgroupId: options?.groupId,\n\t\t},\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/pinByHash`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinByCIDResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing cid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while pinning by CID\");\n\t}\n};\n","/**\n * Unpins multiple files from Pinata and IPFS.\n *\n * This function allows you to remove pins for multiple files from your Pinata account.\n * Unpinning a file means that Pinata will no longer guarantee its availability on IPFS,\n * although the content may still be available if pinned by other IPFS nodes.\n *\n * @async\n * @function unpinFile\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string[]} files - An array of IPFS hashes (CIDs) of the files to unpin.\n * @returns {Promise<UnpinResponse[]>} A promise that resolves to an array of objects, each containing the status of the unpin operation for each file.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the unpinning process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const unpin = await pinata.unpin([\n *   \"bafkreih5aznjvttude6c3wbvqeebb6rlx5wkbzyppv7garjiubll2ceym4\"\n * ])\n */\n\nimport type { PinataConfig, UnpinResponse } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const unpinFile = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: string[],\n): Promise<UnpinResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst responses: UnpinResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/unpin\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const hash of files) {\n\t\ttry {\n\t\t\tconst response = await fetch(`${endpoint}/pinning/unpin/${hash}`, {\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\terrorData,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\t\tresponse.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst result = await response.text();\n\t\t\tresponses.push({\n\t\t\t\thash: hash,\n\t\t\t\tstatus: result,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error unpinning file ${hash}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while unpinning file ${hash}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\thash: hash,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n","/**\n * Lists files pinned to Pinata based on the provided configuration and options.\n *\n * This function fetches a list of pinned files from the Pinata API, allowing for\n * various filtering and pagination options.\n *\n * @async\n * @function listFiles\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {PinListQuery} [options] - Optional query parameters to filter and paginate the results.\n * @param {string} [options.cid] - Filter by the CID of the file.\n * @param {string} [options.pinStart] - Filter by the start date of pinning (ISO 8601 format).\n * @param {string} [options.pinEnd] - Filter by the end date of pinning (ISO 8601 format).\n * @param {number} [options.pinSizeMin] - Filter by minimum pin size in bytes.\n * @param {number} [options.pinSizeMax] - Filter by maximum pin size in bytes.\n * @param {number} [options.pageLimit] - Number of items to return per page.\n * @param {number} [options.pageOffset] - Number of items to skip (for pagination).\n * @param {string} [options.name] - Filter by the name of the file.\n * @param {string} [options.key] - Metadata key to filter by (used with value and operator).\n * @param {string | number} [options.value] - Metadata value to filter by (used with key and operator).\n * @param {string} [options.operator] - Comparison operator for metadata filtering.\n * @param {string} [options.groupId] - Filter by group ID.\n * @returns {Promise<PinListItem[]>} A promise that resolves to an array of PinListItem objects.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the file listing process.\n *//**\n * Lists files pinned to Pinata based on the provided configuration and options.\n *\n * This function fetches a list of pinned files from the Pinata API, allowing for\n * various filtering and pagination options.\n *\n * @async\n * @function listFiles\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {PinListQuery} [options] - Optional query parameters to filter and paginate the results.\n * @param {string} [options.cid] - Filter by the CID of the file.\n * @param {string} [options.pinStart] - Filter by the start date of pinning (ISO 8601 format).\n * @param {string} [options.pinEnd] - Filter by the end date of pinning (ISO 8601 format).\n * @param {number} [options.pinSizeMin] - Filter by minimum pin size in bytes.\n * @param {number} [options.pinSizeMax] - Filter by maximum pin size in bytes.\n * @param {number} [options.pageLimit] - Number of items to return per page.\n * @param {number} [options.pageOffset] - Number of items to skip (for pagination).\n * @param {string} [options.name] - Filter by the name of the file.\n * @param {string} [options.key] - Metadata key to filter by (used with value and operator).\n * @param {string | number} [options.value] - Metadata value to filter by (used with key and operator).\n * @param {string} [options.operator] - Comparison operator for metadata filtering.\n * @param {string} [options.groupId] - Filter by group ID.\n * @returns {Promise<PinListItem[]>} A promise that resolves to an array of PinListItem objects.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the file listing process.\n * @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *\n *  const files = await pinata.listFiles().name(\"pinnie\")\n */\n\nimport type {\n\tPinListItem,\n\tPinListQuery,\n\tPinListResponse,\n\tPinataConfig,\n} from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const listFiles = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: PinListQuery,\n): Promise<PinListItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams({\n\t\tincludesCount: \"false\",\n\t});\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tpinStart,\n\t\t\tpinEnd,\n\t\t\tpinSizeMin,\n\t\t\tpinSizeMax,\n\t\t\tpageLimit,\n\t\t\tpageOffset,\n\t\t\tname,\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\toperator,\n\t\t\tgroupId,\n\t\t} = options;\n\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (pinStart) params.append(\"pinStart\", pinStart);\n\t\tif (pinEnd) params.append(\"pinEnd\", pinEnd);\n\t\tif (pinSizeMin) params.append(\"pinSizeMin\", pinSizeMin.toString());\n\t\tif (pinSizeMax) params.append(\"pinSizeMax\", pinSizeMax.toString());\n\t\tif (pageLimit) params.append(\"pageLimit\", pageLimit.toString());\n\t\tif (pageOffset) params.append(\"pageOffset\", pageOffset.toString());\n\t\tif (groupId) params.append(\"groupId\", groupId);\n\t\tif (name) params.append(\"metadata[name]\", name);\n\t\tif (key && value) {\n\t\t\tconst keyValueParam = JSON.stringify({\n\t\t\t\t[key]: { value, op: operator || \"eq\" },\n\t\t\t});\n\t\t\tparams.append(\"metadata[keyvalues]\", keyValueParam);\n\t\t}\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/data/pinList?status=pinned&${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/listFiles\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: PinListResponse = await request.json();\n\t\treturn res.rows;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing list files: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing files\");\n\t}\n};\n","/**\n * Updates the metadata for a pinned file on Pinata.\n *\n * This function allows you to modify the name and/or key-value pairs associated\n * with a file that has already been pinned to Pinata. This is useful for\n * organizing and categorizing your pinned content.\n *\n * @async\n * @function updateMetadata\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {PinataMetadataUpdate} options - The options for updating the metadata.\n * @param {string} options.cid - The Content Identifier (CID) of the pinned file to update.\n * @param {string} [options.name] - The new name to assign to the pinned file (optional).\n * @param {Record<string, string | number>} [options.keyValues] - Key-value pairs to associate with the pinned file (optional).\n * @returns {Promise<string>} A promise that resolves to a string confirming the update.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the metadata update process.\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const update = await pinata.updateMedatadata({\n *   cid: \"bafkreih5aznjvttude6c3wbvqeebb6rlx5wkbzyppv7garjiubll2ceym4\",\n *   name: \"Pinnie V2\",\n *   keyValues: {\n *     whimsey: 200\n *   }\n * })\n */\n\nimport type { PinataConfig, PinataMetadataUpdate } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const updateMetadata = async (\n\tconfig: PinataConfig | undefined,\n\toptions: PinataMetadataUpdate,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\tconst data = {\n\t\tipfsPinHash: options.cid,\n\t\tname: options.name,\n\t\tkeyvalues: options.keyValues,\n\t};\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateMetadata\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinning/hashMetadata`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: string = await request.text();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing updateMetadata: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating metadata\");\n\t}\n};\n","import type * as IsIPFS from \"is-ipfs\";\nimport { ContainsCIDResponse } from \"../core/types\";\n\nlet isIPFSModule: typeof IsIPFS;\n\nasync function getIsIPFS() {\n\tif (!isIPFSModule) {\n\t\tisIPFSModule = await import(\"is-ipfs\");\n\t}\n\treturn isIPFSModule;\n}\n\nexport async function containsCID(input: string): Promise<ContainsCIDResponse> {\n\tif (typeof input !== \"string\") {\n\t\tthrow new Error(\"Input is not a string\");\n\t}\n\n\tconst isIPFS = await getIsIPFS();\n\n\t// Helper function to check if a string starts with a CID\n\tconst startsWithCID = (str: string) => {\n\t\tconst parts = str.split(\"/\");\n\t\treturn isIPFS.cid(parts[0]) ? parts[0] : null;\n\t};\n\n\t// Check if the input itself is a CID or starts with a CID\n\tconst directCID = startsWithCID(input);\n\tif (directCID) {\n\t\treturn {\n\t\t\tcontainsCid: true,\n\t\t\tcid: directCID,\n\t\t};\n\t}\n\n\tlet url: URL;\n\ttry {\n\t\t// Try to parse the input as a URL\n\t\turl = new URL(input);\n\t} catch (error) {\n\t\t// If parsing fails, treat the input as a potential path-like string\n\t\tconst parts = input.split(/\\/|\\?/);\n\t\tfor (const part of parts) {\n\t\t\tconst cid = startsWithCID(part);\n\t\t\tif (cid) {\n\t\t\t\treturn {\n\t\t\t\t\tcontainsCid: true,\n\t\t\t\t\tcid: cid,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tcontainsCid: false,\n\t\t\tcid: null,\n\t\t};\n\t}\n\n\t// Check for CID in subdomain\n\tconst subdomains = url.hostname.split(\".\");\n\tfor (const subdomain of subdomains) {\n\t\tif (isIPFS.cid(subdomain)) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: subdomain,\n\t\t\t};\n\t\t}\n\t}\n\n\t// Check for CID in path\n\tconst pathParts = url.pathname.split(\"/\");\n\tfor (const part of pathParts) {\n\t\tconst cid = startsWithCID(part);\n\t\tif (cid) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: cid,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tcontainsCid: false,\n\t\tcid: null,\n\t};\n}\n\nexport async function convertToDesiredGateway(\n\tsourceUrl: string,\n\tdesiredGatewayPrefix: string | undefined,\n) {\n\tconst results = await containsCID(sourceUrl);\n\n\tif (results.containsCid !== true) {\n\t\tthrow new Error(\"url does not contain CID\");\n\t}\n\n\tif (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n\t}\n\n\tconst urlObj = new URL(sourceUrl);\n\tconst path = urlObj.pathname + urlObj.search + urlObj.hash;\n\n\t//case 1 - the ipfs://cid path\n\tif (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//case 2 - the /ipfs/cid path (this should cover ipfs://ipfs/cid as well)\n\tif (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 3 - the /ipns/cid path\n\tif (sourceUrl.includes(`/ipns/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 4 - the CID is in the subdomain\n\tif (urlObj.hostname.includes(results.cid!)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//this is the fallback if no supported patterns are provided\n\tthrow new Error(\n\t\t\"unsupported URL pattern, please submit a github issue with the URL utilized\",\n\t);\n}\n","/**\n * Retrieves the content of a file from IPFS using its Content Identifier (CID).\n *\n * This function fetches the content associated with a given CID from the specified\n * Pinata gateway. It can handle various content types and returns the data along\n * with the content type information.\n *\n * @async\n * @function getCid\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT and gateway information.\n * @param {string} cid - The Content Identifier (CID) of the file to retrieve.\n * @returns {Promise<GetCIDResponse>} A promise that resolves to an object containing the file data and content type.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the retrieval process.\n *\n * @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *\n *  const upload = await pinata.gateways.get(\"QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\"* )\n *\n */\n\nimport { convertToDesiredGateway } from \"../../utils/gateway-tools\";\nimport type {\n\tGetCIDResponse,\n\tPinataConfig,\n\tOptimizeImageOptions,\n} from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const getCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\toptions?: OptimizeImageOptions,\n): Promise<GetCIDResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet data: JSON | string | Blob;\n\tlet newUrl: string;\n\n\tnewUrl = await convertToDesiredGateway(cid, config?.pinataGateway);\n\n\tconst params = new URLSearchParams();\n\n\tif (config?.pinataGatewayKey) {\n\t\tparams.append(\"pinataGatewayToken\", config.pinataGatewayKey);\n\t}\n\n\tif (options) {\n\t\tif (options.width) params.append(\"img-width\", options.width.toString());\n\t\tif (options.height) params.append(\"img-height\", options.height.toString());\n\t\tif (options.dpr) params.append(\"img-dpr\", options.dpr.toString());\n\t\tif (options.fit) params.append(\"img-fit\", options.fit);\n\t\tif (options.gravity) params.append(\"img-gravity\", options.gravity);\n\t\tif (options.quality)\n\t\t\tparams.append(\"img-quality\", options.quality.toString());\n\t\tif (options.format) params.append(\"img-format\", options.format);\n\t\tif (options.animation !== undefined)\n\t\t\tparams.append(\"img-anim\", options.animation.toString());\n\t\tif (options.sharpen)\n\t\t\tparams.append(\"img-sharpen\", options.sharpen.toString());\n\t\tif (options.onError === true) params.append(\"img-onerror\", \"redirect\");\n\t\tif (options.metadata) params.append(\"img-metadata\", options.metadata);\n\t}\n\n\tconst queryString = params.toString();\n\tif (queryString) {\n\t\tnewUrl += `?${queryString}`;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(newUrl);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst contentType: string | null = request.headers.get(\"content-type\");\n\n\t\tif (contentType?.includes(\"application/json\")) {\n\t\t\tdata = await request.json();\n\t\t} else if (contentType?.includes(\"text/\")) {\n\t\t\tdata = await request.text();\n\t\t} else {\n\t\t\tdata = await request.blob();\n\t\t}\n\n\t\tconst res: GetCIDResponse = {\n\t\t\tdata: data,\n\t\t\tcontentType: contentType,\n\t\t};\n\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getCid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting CID contents\",\n\t\t);\n\t}\n};\n","/**\n * Converts an IPFS URL to a desired gateway URL.\n *\n * This function takes an IPFS URL and converts it to use a specified gateway.\n * If a Pinata Gateway Key is provided in the configuration, it will be appended\n * to the URL as a query parameter.\n *\n * @function convertIPFSUrl\n * @param {PinataConfig | undefined} config - The Pinata configuration object.\n * @param {string} config.pinataGateway - The desired gateway URL to use.\n * @param {string} [config.pinataGatewayKey] - Optional Pinata Gateway Key for authenticated access.\n * @param {string} url - The original IPFS URL to convert.\n * @returns {Promise<string>} The converted URL using the specified gateway.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const url = await pinata.gateways.convert(\n *   \"ipfs://QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\"\n * );\n */\n\nimport { convertToDesiredGateway } from \"../../utils/gateway-tools\";\nimport type { PinataConfig } from \"../types\";\n\nexport const convertIPFSUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\tgatewayPrefix?: string,\n): Promise<string> => {\n\tlet newUrl: string;\n\tlet prefix: string =\n\t\tgatewayPrefix || config?.pinataGateway || \"https://gateway.pinata.cloud\";\n\tnewUrl = await convertToDesiredGateway(url, prefix);\n\tif (config?.pinataGatewayKey) {\n\t\t`${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n\t}\n\treturn newUrl;\n};\n","/**\n * Retrieves information about pin jobs from the Pinata API.\n *\n * This function fetches a list of pin jobs based on the provided configuration and options.\n * Pin jobs represent the status of pinning operations in progress or completed.\n *\n * @async\n * @function pinJobs\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {PinJobQuery} [options] - Optional query parameters to filter and paginate the results.\n * @param {string} [options.ipfs_pin_hash] - Filter by the IPFS hash (CID) of the content being pinned.\n * @param {('prechecking'|'retrieving'|'expired'|'over_free_limit'|'over_max_size'|'invalid_object'|'bad_host_node')} [options.status] - Filter by the status of the pin job.\n * @param {('ASC'|'DSC')} [options.sort] - Sort order for the results (ascending or descending).\n * @param {number} [options.limit] - Number of items to return per page.\n * @param {number} [options.offset] - Number of items to skip (for pagination).\n * @returns {Promise<PinJobItem[]>} A promise that resolves to an array of PinJobItem objects.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the pin jobs retrieval process.\n *  @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *  const jobs = await pinata.pinJobs().status(\"prechecking\")\n */\n\nimport type {\n\tPinJobItem,\n\tPinJobQuery,\n\tPinJobResponse,\n\tPinataConfig,\n} from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const pinJobs = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: PinJobQuery,\n): Promise<PinJobItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams({\n\t\tincludesCount: \"false\",\n\t});\n\n\tif (options) {\n\t\tconst { ipfs_pin_hash: cid, status, sort, limit, offset } = options;\n\n\t\tif (cid) params.append(\"ipfs_pin_hash\", cid.toString());\n\t\tif (status) params.append(\"status\", status.toString());\n\t\tif (sort) params.append(\"sort\", sort.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (offset) params.append(\"offset\", offset.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/pinning/pinJobs?${params.toString()}`;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinJobs\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\t\tconst res: PinJobResponse = await request.json();\n\t\treturn res.rows;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing pinJobs: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing pin jobs\");\n\t}\n};\n","/**\n * Retrieves the total count of files pinned to Pinata for the authenticated user.\n *\n * This function makes a request to the Pinata API to fetch the total number of files\n * that the user has pinned to their account. This can be useful for monitoring\n * account usage and managing pinned content.\n *\n * @async\n * @function pinnedFileCount\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @returns {Promise<number>} A promise that resolves to the total number of pinned files.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the retrieval process.\n *\n * @example\n * const config = { pinataJwt: 'your-jwt-token' };\n * try {\n *   const count = await pinnedFileCount(config);\n *   console.log(`Total pinned files: ${count}`);\n * } catch (error) {\n *   console.error('Error getting pinned file count:', error);\n * }\n */\n\nimport type { PinataConfig, UserPinnedDataResponse } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const pinnedFileCount = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinnedFileUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_count;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing pinnedFileUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting pinned file usage\",\n\t\t);\n\t}\n};\n","/**\n * Retrieves the total storage usage in bytes for all files pinned to Pinata by the authenticated user.\n *\n * This function makes a request to the Pinata API to fetch the total storage size\n * of all files that the user has pinned to their account. This can be useful for\n * monitoring account usage, managing storage limits, and planning for capacity.\n *\n * @async\n * @function totalStorageUsage\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @returns {Promise<number>} A promise that resolves to the total storage usage in bytes.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the retrieval process.\n *\n * @example\n * const config = { pinataJwt: 'your-jwt-token' };\n * try {\n *   const totalBytes = await totalStorageUsage(config);\n *   console.log(`Total storage usage: ${totalBytes} bytes`);\n *   console.log(`Total storage usage: ${totalBytes / (1024 * 1024)} MB`);\n * } catch (error) {\n *   console.error('Error getting total storage usage:', error);\n * }\n */\n\nimport type { PinataConfig, UserPinnedDataResponse } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const totalStorageUsage = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/totalStorageUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_size_total;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing totalStorageUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting total storage usage\",\n\t\t);\n\t}\n};\n","/**\n * Creates a new API key for Pinata services.\n *\n * This function allows you to generate a new API key with specific permissions\n * for use with Pinata's IPFS pinning services. It's useful for creating keys\n * with limited access or for specific applications.\n *\n * @async\n * @function createKey\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {KeyOptions} options - The options for creating a new API key.\n * @param {string} options.keyName - The name to assign to the new API key.\n * @param {KeyPermissions} options.permissions - The permissions to assign to the new key.\n * @param {number} [options.maxUses] - Optional. The maximum number of times the key can be used.\n * @returns {Promise<KeyResponse>} A promise that resolves to an object containing the new API key details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the key creation process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const key = await pinata.keys.create({\n *   keyName: \"user 1\",\n *   permissions: {\n *     admin: true,\n *   },\n *   maxUses: 1,\n * });\n */\n\nimport type { PinataConfig, KeyOptions, KeyResponse } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const createKey = async (\n\tconfig: PinataConfig | undefined,\n\toptions: KeyOptions,\n): Promise<KeyResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createKey\",\n\t\t};\n\t}\n\n\tconst data = JSON.stringify(options);\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/v3/pinata/keys`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: KeyResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createKey: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating API key\");\n\t}\n};\n","/**\n * Retrieves a list of API keys associated with the Pinata account.\n *\n * This function allows you to fetch and optionally filter the API keys linked to your Pinata account.\n * It's useful for managing your API keys, checking their status, or auditing key usage.\n *\n * @async\n * @function listKeys\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {KeyListQuery} [options] - Optional query parameters to filter the list of keys.\n * @param {number} [options.offset] - The number of items to skip before starting to collect the result set.\n * @param {boolean} [options.revoked] - If true, includes revoked keys in the results.\n * @param {boolean} [options.limitedUse] - If true, only returns keys with usage limits.\n * @param {boolean} [options.exhausted] - If true, only returns keys that have reached their usage limit.\n * @param {string} [options.name] - Filters keys by name (partial match).\n * @returns {Promise<KeyListItem[]>} A promise that resolves to an array of key objects matching the query.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the key listing process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const keys = await pinata.keys\n *   .list()\n *   .name(\"Admin\")\n *   .revoked(false)\n */\n\nimport type {\n\tKeyListItem,\n\tKeyListQuery,\n\tKeyListResponse,\n\tPinataConfig,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const listKeys = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: KeyListQuery,\n): Promise<KeyListItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listKeys\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { offset, name, revoked, limitedUse, exhausted } = options;\n\n\t\tif (offset) params.append(\"offset\", offset.toString());\n\t\tif (revoked !== undefined) params.append(\"revoked\", revoked.toString());\n\t\tif (limitedUse !== undefined)\n\t\t\tparams.append(\"limitedUse\", limitedUse.toString());\n\t\tif (exhausted !== undefined)\n\t\t\tparams.append(\"exhausted\", exhausted.toString());\n\t\tif (name) params.append(\"name\", name);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/v3/pinata/keys?${params.toString()}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: KeyListResponse = await request.json();\n\t\treturn res.keys;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listKeys: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing API keys\");\n\t}\n};\n","/**\n * Revokes multiple API keys from the Pinata account.\n *\n * This function allows you to revoke (invalidate) multiple API keys at once.\n * It's useful for security purposes, such as when keys may have been compromised\n * or are no longer needed.\n *\n * @async\n * @function revokeKeys\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string[]} keys - An array of API key strings to be revoked.\n * @returns {Promise<RevokeKeyResponse[]>} A promise that resolves to an array of objects,\n *   each containing the status of the revocation attempt for each key.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the key revocation process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const revoke = await pinata.keys.revoke([\n *  \"94566af5e63833e260be\"\n * ]);\n */\n\nimport type { PinataConfig, RevokeKeyResponse } from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const revokeKeys = async (\n\tconfig: PinataConfig | undefined,\n\tkeys: string[],\n): Promise<RevokeKeyResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/revokeKeys\",\n\t\t};\n\t}\n\n\tconst responses: RevokeKeyResponse[] = [];\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const key of keys) {\n\t\ttry {\n\t\t\tconst request = await fetch(`${endpoint}/v3/pinata/keys/${key}`, {\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\terrorData,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst result: string = await request.json();\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: result,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error revoking key ${key}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while revoking key ${key}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn responses;\n};\n","/**\n * Creates a new group in Pinata for organizing pinned content.\n *\n * This function allows you to create a new group in your Pinata account.\n * Groups can be used to organize and manage your pinned content more effectively.\n *\n * @async\n * @function createGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GroupOptions} options - The options for creating a new group.\n * @param {string} options.name - The name of the group to be created.\n * @returns {Promise<GroupResponseItem>} A promise that resolves to an object containing details of the created group.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the group creation process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const group = await pinata.groups.create({\n *\tname: \"My New Group\",\n * });\n */\n\nimport type { PinataConfig, GroupOptions, GroupResponseItem } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const createGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupOptions,\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify(options);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: GroupResponseItem = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating a group\");\n\t}\n};\n","/**\n * Retrieves a list of groups from Pinata.\n *\n * This function fetches a list of groups associated with your Pinata account.\n * It supports pagination and filtering by name.\n *\n * @async\n * @function listGroups\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GroupQueryOptions} [options] - Optional query parameters to filter and paginate the results.\n * @param {number} [options.offset] - The number of items to skip before starting to collect the result set.\n * @param {string} [options.nameContains] - Filter groups by name (case-insensitive partial match).\n * @param {number} [options.limit] - The numbers of items to return.\n * @returns {Promise<GroupResponseItem[]>} A promise that resolves to an array of group objects.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the group listing process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const groups = await pinata.groups\n *   .list()\n *   .name(\"Greetings\");\n */\n\nimport type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGroupQueryOptions,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const listGroups = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: GroupQueryOptions,\n): Promise<GroupResponseItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listGroups\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { offset, nameContains, limit } = options;\n\n\t\tif (offset) params.append(\"offset\", offset.toString());\n\t\tif (nameContains !== undefined)\n\t\t\tparams.append(\"nameContains\", nameContains.toString());\n\t\tif (limit !== undefined) params.append(\"limit\", limit.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups?${params.toString()}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: GroupResponseItem[] = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listGroups: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing groups\");\n\t}\n};\n","/**\n * Retrieves information about a specific group from Pinata.\n *\n * This function fetches details about a group in your Pinata account using its ID.\n * It provides information such as the group's name, creation date, and last update time.\n *\n * @async\n * @function getGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GetGroupOptions} options - The options for retrieving a group.\n * @param {string} options.groupId - The ID of the group to retrieve.\n * @returns {Promise<GroupResponseItem>} A promise that resolves to an object containing the group's details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the group retrieval process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const groups = await pinata.groups.get({\n *\tgroupId: \"3778c10d-452e-4def-8299-ee6bc548bdb0\",\n * });\n */\n\nimport type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGetGroupOptions,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const getGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: GroupResponseItem = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting info for a group\",\n\t\t);\n\t}\n};\n","/**\n * Adds one or more CIDs (Content Identifiers) to a specified Pinata group.\n *\n * This function allows you to associate multiple CIDs with a group in Pinata,\n * which can be useful for organizing and managing your pinned content.\n *\n * @async\n * @function addToGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GroupCIDOptions} options - The options for adding CIDs to a group.\n * @param {string} options.groupId - The ID of the group to add the CIDs to.\n * @param {string[]} options.cids - An array of CIDs to add to the group.\n * @returns {Promise<string>} A promise that resolves to a string confirming the addition.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const group = await pinata.groups.addCids({\n * \tgroupId: \"3778c10d-452e-4def-8299-ee6bc548bdb0\",\n * \tcids: [\"QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\"],\n * });\n */\nimport type { GroupCIDOptions, PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const addToGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tcids: options.cids,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addToGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${options.groupId}/cids`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: string = await request.text();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addToGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding CIDs to group\",\n\t\t);\n\t}\n};\n","/**\n * Updates the information of a specified group in Pinata.\n *\n * This function allows you to modify the name of an existing group in your Pinata account.\n * It's useful for renaming groups to better organize your pinned content.\n *\n * @async\n * @function updateGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {UpdateGroupOptions} options - The options for updating a group.\n * @param {string} options.groupId - The ID of the group to be updated.\n * @param {string} options.name - The new name for the group.\n * @returns {Promise<GroupResponseItem>} A promise that resolves to an object containing the updated group's details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the group update process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const groups = await pinata.groups.update({\n *\tgroupId: \"3778c10d-452e-4def-8299-ee6bc548bdb0\",\n *\tname: \"My New Group 2\"\n * });\n */\n\nimport type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tUpdateGroupOptions,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const updateGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: UpdateGroupOptions,\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tname: options.name,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: GroupResponseItem = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing updateGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating group\");\n\t}\n};\n","/**\n * Removes one or more CIDs (Content Identifiers) from a specified Pinata group.\n *\n * This function allows you to disassociate multiple CIDs from a group in Pinata.\n * It's useful for managing the content within your groups without deleting the actual files.\n *\n * @async\n * @function removeFromGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GroupCIDOptions} options - The options for removing CIDs from a group.\n * @param {string} options.groupId - The ID of the group to remove the CIDs from.\n * @param {string[]} options.cids - An array of CIDs to remove from the group.\n * @returns {Promise<string>} A promise that resolves to a string confirming the removal.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the process.\n *\n * @example\n *import { PinataSDK } from \"pinata\";\n *\n *const pinata = new PinataSDK({\n *  pinataJwt: process.env.PINATA_JWT!,\n *  pinataGateway: \"example-gateway.mypinata.cloud\",\n *});\n *\n *const group = await pinata.groups.removeCids({\n *\tgroupId: \"3778c10d-452e-4def-8299-ee6bc548bdb0\",\n *\tcids: [\"QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\"],\n *});\n */\n\nimport type { GroupCIDOptions, PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const removeFromGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/removeFromGroup\",\n\t\t};\n\t}\n\n\tconst data = JSON.stringify({\n\t\tcids: options.cids,\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${options.groupId}/cids`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: string = await request.text();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing removeFromGroup: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while removing CIDs from a group\",\n\t\t);\n\t}\n};\n","/**\n * Deletes a specified group from Pinata.\n *\n * This function allows you to remove a group from your Pinata account.\n * Note that deleting a group does not delete the files within the group,\n * it only removes the group association.\n *\n * @async\n * @function deleteGroup\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {GetGroupOptions} options - The options for deleting a group.\n * @param {string} options.groupId - The ID of the group to be deleted.\n * @returns {Promise<string>} A promise that resolves to a string confirming the deletion.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the group deletion process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const groups = await pinata.groups.delete({\n *\tgroupId: \"3778c10d-452e-4def-8299-ee6bc548bdb0\",\n * });\n */\n\nimport type { GetGroupOptions, PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const deleteGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res: string = await request.text();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing deleteGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while deleting a group\");\n\t}\n};\n","/**\n * Adds a signature to a specific Content Identifier (CID) on Pinata.\n *\n * This function allows you to add a cryptographic signature to a file identified by its CID.\n * It's useful for verifying ownership or authenticity of content stored on IPFS via Pinata.\n *\n * @async\n * @function addSignature\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {SignatureOptions} options - Options for adding the signature.\n * @param {string} options.cid - The Content Identifier (CID) of the file to be signed.\n * @param {string} options.signature - The cryptographic signature to be added.\n * @returns {Promise<SignatureResponse>} A promise that resolves to an object containing the signature details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {PinataError} If the user is unauthorized to sign the file or if the file already has a signature.\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the signature addition process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const signature = await pinata.signatures.add({\n *\tcid: \"QmXGeVy9dVwfuFJmvbzz8y4dYK1TdxXbDGzwbNuyZ5xXSU\",\n *\tsignature: \"0x1ba6c2a8412dc9b0be37b013ea5bddd97251dab4d435cc9c4c7bcf331d4017ca2de07485ad6a15ce60d3700cee802787bc7ede0c112c7843f702bb1e71b750911b\"\n * })\n */\n\nimport type {\n\tSignatureOptions,\n\tPinataConfig,\n\tSignatureResponse,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const addSignature = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SignatureOptions,\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tsignature: options.signature,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/v3/ipfs/signature/${options.cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized signing, you must be the original owner of the file and it must not have a signature\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n","/**\n * Retrieves the signature associated with a specific Content Identifier (CID) from Pinata.\n *\n * This function allows you to fetch the cryptographic signature associated with a file\n * identified by its CID. It's useful for verifying the authenticity or ownership of\n * content stored on IPFS via Pinata.\n *\n * @async\n * @function getSignature\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} cid - The Content Identifier (CID) of the file whose signature is to be retrieved.\n * @returns {Promise<SignatureResponse>} A promise that resolves to an object containing the signature details.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the signature retrieval process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const signature = await pinata.signatures.get(\"QmXGeVy9dVwfuFJmvbzz8y4dYK1TdxXbDGzwbNuyZ5xXSU\"\n )\n */\n\nimport type { PinataConfig, SignatureResponse } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const getSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/v3/ipfs/signature/${cid}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching signature for CID\",\n\t\t);\n\t}\n};\n","/**\n * Removes the signature associated with a specific Content Identifier (CID) from Pinata.\n *\n * This function allows you to delete the cryptographic signature associated with a file\n * identified by its CID. It's useful for managing ownership claims or updating the\n * authenticity status of content stored on IPFS via Pinata.\n *\n * @async\n * @function removeSignature\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} cid - The Content Identifier (CID) of the file whose signature is to be removed.\n * @returns {Promise<string>} A promise that resolves to \"OK\" if the signature was successfully removed.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the signature removal process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const signature = await pinata.signatures.delete(\"QmXGeVy9dVwfuFJmvbzz8y4dYK1TdxXbDGzwbNuyZ5xXSU\"\n )\n */\n\nimport type { PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const removeSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/removeSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/v3/ipfs/signature/${cid}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\t\treturn \"OK\";\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n","/**\n * Retrieves top gateway analytics data from Pinata.\n *\n * This function fetches top analytics data for Pinata gateways, allowing for various\n * filtering options and customization of the results.\n *\n * @async\n * @function analyticsTopUsage\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {TopGatewayAnalyticsQuery} [options] - Optional query parameters to filter and customize the analytics results.\n * @param {string} [options.cid] - Filter by the CID of the file.\n * @param {string} [options.gateway_domain] - The gateway domain to fetch analytics for.\n * @param {string} [options.start_date] - The start date for the analytics period (ISO 8601 format).\n * @param {string} [options.end_date] - The end date for the analytics period (ISO 8601 format).\n * @param {string} [options.file_name] - Filter by file name.\n * @param {string} [options.user_agent] - Filter by user agent.\n * @param {string} [options.country] - Filter by country.\n * @param {string} [options.region] - Filter by region.\n * @param {string} [options.referer] - Filter by referer.\n * @param {number} [options.limit] - Limit the number of results.\n * @param {\"asc\" | \"desc\"} [options.sort_order] - Sort order for the results.\n * @param {\"requests\" | \"bandwidth\"} [options.sort_by] - Sort the results by requests or bandwidth.\n * @param {\"cid\" | \"country\" | \"region\" | \"user_agent\" | \"referer\" | \"file_name\"} [options.attribute] - Group results by this attribute.\n * @returns {Promise<TopGatewayAnalyticsItem[]>} A promise that resolves to an array of top gateway analytics items.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the analytics retrieval process.\n *\n * @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *\n *  const topAnalytics = await pinata.gateways.topUsageAnalytics({\n *    domain: \"example-gateway.mypinata.cloud\",\n *    start: \"2024-08-01\",\n *    end: \"2024-08-15\",\n *    sortBy: \"requests\",\n *    attribute: \"cid\"\n *  }).cid(\"QmVLwvmGehsrNEvhcCnnsw5RQNseohgEkFNN1848zNzdng\").sort(\"asc\");\n */\n\nimport type {\n\tTopGatewayAnalyticsQuery,\n\tTopGatewayAnalyticsItem,\n\tPinataConfig,\n} from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const analyticsTopUsage = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TopGatewayAnalyticsQuery,\n): Promise<TopGatewayAnalyticsItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams({\n\t\tincludesCount: \"false\",\n\t});\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tsort_by,\n\t\t\tattribute,\n\t\t} = options;\n\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (gateway_domain) params.append(\"gateway_domain\", gateway_domain);\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (attribute) params.append(\"by\", attribute);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/v3/ipfs/gateway_analytics_top?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsTopUsage\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: TopGatewayAnalyticsItem[] = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n","/**\n * Retrieves gateway analytics data for a specified time interval from Pinata.\n *\n * This function fetches analytics data for Pinata gateways, allowing for various\n * filtering options and time interval specifications.\n *\n * @async\n * @function analyticsDateInterval\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {TimeIntervalGatewayAnalyticsQuery} [options] - Optional query parameters to filter and customize the analytics results.\n * @param {string} [options.cid] - Filter by the CID of the file.\n * @param {string} [options.gateway_domain] - The gateway domain to fetch analytics for.\n * @param {string} [options.start_date] - The start date for the analytics period (ISO 8601 format).\n * @param {string} [options.end_date] - The end date for the analytics period (ISO 8601 format).\n * @param {string} [options.file_name] - Filter by file name.\n * @param {string} [options.user_agent] - Filter by user agent.\n * @param {string} [options.country] - Filter by country.\n * @param {string} [options.region] - Filter by region.\n * @param {string} [options.referer] - Filter by referer.\n * @param {number} [options.limit] - Limit the number of results.\n * @param {\"asc\" | \"desc\"} [options.sort_order] - Sort order for the results.\n * @param {\"day\" | \"week\"} [options.date_interval] - The time interval for grouping results.\n * @param {\"requests\" | \"bandwidth\"} [options.sort_by] - Sort the results by requests or bandwidth.\n * @returns {Promise<TimeIntervalGatewayAnalyticsResponse>} A promise that resolves to an object containing the analytics data.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the analytics retrieval process.\n *\n * @example\n *  import { PinataSDK } from \"pinata\";\n *\n *  const pinata = new PinataSDK({\n *    pinataJwt: process.env.PINATA_JWT!,\n *    pinataGateway: \"example-gateway.mypinata.cloud\",\n *  });\n *\n *  const analytics = await pinata.gateways.dateIntervalAnalytics({\n *    domain: \"example-gateway.mypinata.cloud\",\n *    start: \"2024-08-01\",\n *    end: \"2024-08-15\",\n *    interval: \"day\"\n *  }).sortBy(\"bandwidth\");\n */\n\nimport type {\n\tTimeIntervalGatewayAnalyticsQuery,\n\tTimeIntervalGatewayAnalyticsResponse,\n\tPinataConfig,\n} from \"../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const analyticsDateInterval = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TimeIntervalGatewayAnalyticsQuery,\n): Promise<TimeIntervalGatewayAnalyticsResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tdate_interval,\n\t\t\tsort_by,\n\t\t} = options;\n\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (gateway_domain) params.append(\"gateway_domain\", gateway_domain);\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (date_interval) params.append(\"by\", date_interval);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/v3/ipfs/gateway_analytics_time_series?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsDateInterval\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: TimeIntervalGatewayAnalyticsResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n","/**\n * Swaps a CID (Content Identifier) with a new one in Pinata.\n *\n * This function allows you to replace an existing CID with a new one in your Pinata account.\n * It's useful for updating content while maintaining the same access point or reference.\n *\n * @async\n * @function swapCid\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {SwapCidOptions} options - The options for swapping the CID.\n * @param {string} options.cid - The original CID to be replaced.\n * @param {string} options.swapCid - The new CID to replace the original one.\n * @returns {Promise<SwapCidResponse>} A promise that resolves to an object containing details of the CID swap operation.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {PinataError} If the swap operation is unauthorized or if the original CID is not found in the account.\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the CID swap process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const swapResult = await pinata.gateways.swapCid({\n *   cid: \"QmOldCid123\",\n *   swapCid: \"QmNewCid456\"\n * });\n */\n\nimport type { SwapCidOptions, SwapCidResponse, PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const swapCid = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapCidOptions,\n): Promise<SwapCidResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tswapCid: options.swapCid,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapCid\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/v3/ipfs/swap/${options.cid}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized CID Swap\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"CID not pinned to account\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing CID Swap: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while swapping CID\");\n\t}\n};\n","/**\n * Retrieves the swap history for a specific CID (Content Identifier) in Pinata.\n *\n * This function allows you to fetch the history of CID swaps for a given CID and domain.\n * It's useful for tracking changes and updates to content over time.\n *\n * @async\n * @function swapHistory\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {SwapHistoryOptions} options - The options for retrieving swap history.\n * @param {string} options.cid - The CID for which to retrieve swap history.\n * @param {string} options.domain - The gateway domain that has the hot swaps plugin installed.\n * @returns {Promise<SwapCidResponse[]>} A promise that resolves to an array of objects, each containing details of a CID swap operation.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {PinataError} If the CID does not have any swap history.\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the retrieval process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const swapHistory = await pinata.gateways.swapHistory({\n *   cid: \"QmSomeCid123\",\n *   domain: \"example.mypinata.cloud\"\n * });\n */\n\nimport type {\n\tSwapCidResponse,\n\tPinataConfig,\n\tSwapHistoryOptions,\n} from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const swapHistory = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapHistoryOptions,\n): Promise<SwapCidResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapHistory\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/v3/ipfs/swap/${options.cid}?domain=${options.domain}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"CID does not have history\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse[] = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error fetching swap history: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching swap history\",\n\t\t);\n\t}\n};\n","/**\n * Deletes a CID swap\n *\n * This function allows you to remove a CID swap configuration from your Pinata account.\n * It's useful for reverting a CID swap or cleaning up outdated swap configurations.\n *\n * @async\n * @function deleteSwap\n * @param {PinataConfig | undefined} config - The Pinata configuration object containing the JWT.\n * @param {string} cid - The CID of the swap configuration to be deleted.\n * @returns {Promise<string>} A promise that resolves to a string indicating the result of the deletion operation.\n * @throws {ValidationError} If the Pinata configuration or JWT is missing.\n * @throws {AuthenticationError} If the authentication fails (e.g., invalid JWT).\n * @throws {PinataError} If the deletion is unauthorized or if the CID is not found in the account.\n * @throws {NetworkError} If there's a network-related error during the API request.\n * @throws {PinataError} For any other errors that occur during the deletion process.\n *\n * @example\n * import { PinataSDK } from \"pinata\";\n *\n * const pinata = new PinataSDK({\n *   pinataJwt: process.env.PINATA_JWT!,\n *   pinataGateway: \"example-gateway.mypinata.cloud\",\n * });\n *\n * const deleteResult = await pinata.gateways.deleteSwap(\"QmSomeCid123\");\n */\n\nimport type { SwapCidResponse, PinataConfig } from \"../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../utils/custom-errors\";\n\nexport const deleteSwap = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteSwap\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/v3/ipfs/swap/${cid}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized CID Swap Deletion\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"CID not pinned to account\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\terrorData,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(\n\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\trequest.status,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t}\n\n\t\treturn request.statusText;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing deleteSwap: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while deleting swap\");\n\t}\n};\n","import type {\n\tFileObject,\n\tPinByCIDResponse,\n\tPinListItem,\n\tPinListQuery,\n\tPinResponse,\n\tPinataConfig,\n\tPinataMetadata,\n\tPinataMetadataUpdate,\n\tUploadCIDOptions,\n\tUploadOptions,\n\tGetCIDResponse,\n\tPinJobQuery,\n\tPinJobItem,\n\tKeyOptions,\n\tKeyResponse,\n\tKeyListQuery,\n\tKeyListItem,\n\tGroupOptions,\n\tGroupResponseItem,\n\tUpdateGroupOptions,\n\tGroupCIDOptions,\n\tGroupQueryOptions,\n\tGetGroupOptions,\n\tAuthTestResponse,\n\tUnpinResponse,\n\tRevokeKeyResponse,\n\tSignatureOptions,\n\tSignatureResponse,\n\tTopGatewayAnalyticsQuery,\n\tTopGatewayAnalyticsItem,\n\tTimeIntervalGatewayAnalyticsQuery,\n\tGatewayAnalyticsQuery,\n\tTimeIntervalGatewayAnalyticsResponse,\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tSwapHistoryOptions,\n\tContainsCIDResponse,\n\tOptimizeImageOptions,\n} from \"./types\";\nimport { testAuthentication } from \"./authentication/testAuthentication\";\nimport { uploadFile } from \"./pinning/file\";\nimport { uploadFileArray } from \"./pinning/fileArray\";\nimport { uploadBase64 } from \"./pinning/base64\";\nimport { uploadUrl } from \"./pinning/url\";\nimport { uploadJson } from \"./pinning/json\";\nimport { uploadCid } from \"./pinning/cid\";\nimport { unpinFile } from \"./pinning/unpin\";\nimport { listFiles } from \"./data/listFiles\";\nimport { updateMetadata } from \"./data/updateMetadata\";\nimport { getCid } from \"./gateway/getCid\";\nimport { convertIPFSUrl } from \"./gateway/convertIPFSUrl\";\nimport { pinJobs } from \"./data/pinJobs\";\nimport { pinnedFileCount } from \"./data/pinnedFileUsage\";\nimport { totalStorageUsage } from \"./data/totalStorageUsage\";\nimport { createKey } from \"./keys/createKey\";\nimport { listKeys } from \"./keys/listKeys\";\nimport { revokeKeys } from \"./keys/revokeKeys\";\nimport { createGroup } from \"./groups/createGroup\";\nimport { listGroups } from \"./groups/listGroups\";\nimport { getGroup } from \"./groups/getGroup\";\nimport { addToGroup } from \"./groups/addToGroup\";\nimport { updateGroup } from \"./groups/updateGroup\";\nimport { removeFromGroup } from \"./groups/removeFromGroup\";\nimport { deleteGroup } from \"./groups/deleteGroup\";\nimport { addSignature } from \"./signatures/addSignature\";\nimport { getSignature } from \"./signatures/getSignature\";\nimport { removeSignature } from \"./signatures/removeSignature\";\nimport { analyticsTopUsage } from \"./gateway/analyticsTopUsage\";\nimport { analyticsDateInterval } from \"./gateway/analyticsDateInterval\";\nimport { swapCid } from \"./gateway/swapCid\";\nimport { swapHistory } from \"./gateway/swapHistory\";\nimport { deleteSwap } from \"./gateway/deleteSwap\";\nimport { containsCID } from \"../utils/gateway-tools\";\n\nconst formatConfig = (config: PinataConfig | undefined) => {\n\tlet gateway = config?.pinataGateway;\n\tif (config && gateway) {\n\t\tif (gateway && !gateway.startsWith(\"https://\")) {\n\t\t\tgateway = `https://${gateway}`;\n\t\t}\n\t\tconfig.pinataGateway = gateway;\n\t}\n\treturn config;\n};\n\nexport class PinataSDK {\n\tconfig: PinataConfig | undefined;\n\tupload: Upload;\n\tgateways: Gateways;\n\tusage: Usage;\n\tkeys: Keys;\n\tgroups: Groups;\n\tsignatures: Signatures;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.upload = new Upload(this.config);\n\t\tthis.gateways = new Gateways(this.config);\n\t\tthis.usage = new Usage(this.config);\n\t\tthis.keys = new Keys(this.config);\n\t\tthis.groups = new Groups(this.config);\n\t\tthis.signatures = new Signatures(this.config);\n\t}\n\n\tsetNewHeaders(headers: Record<string, string>): void {\n\t\tif (!this.config) {\n\t\t\tthis.config = { pinataJwt: \"\", customHeaders: {} };\n\t\t}\n\t\tthis.config.customHeaders = { ...this.config.customHeaders, ...headers };\n\n\t\t// Update headers for all sub-modules\n\t\tthis.upload.updateConfig(this.config);\n\t\tthis.gateways.updateConfig(this.config);\n\t\tthis.usage.updateConfig(this.config);\n\t\tthis.keys.updateConfig(this.config);\n\t\tthis.groups.updateConfig(this.config);\n\t\tthis.signatures.updateConfig(this.config);\n\t}\n\n\ttestAuthentication(): Promise<AuthTestResponse> {\n\t\treturn testAuthentication(this.config);\n\t}\n\n\tunpin(files: string[]): Promise<UnpinResponse[]> {\n\t\treturn unpinFile(this.config, files);\n\t}\n\n\tlistFiles(): FilterFiles {\n\t\treturn new FilterFiles(this.config);\n\t}\n\n\tupdateMetadata(options: PinataMetadataUpdate): Promise<string> {\n\t\treturn updateMetadata(this.config, options);\n\t}\n\n\tpinJobs(): FilterPinJobs {\n\t\treturn new FilterPinJobs(this.config);\n\t}\n}\n\nclass UploadBuilder<T> {\n\tprivate config: PinataConfig | undefined;\n\tprivate uploadFunction: (\n\t\tconfig: PinataConfig | undefined,\n\t\t...args: any[]\n\t) => Promise<T>;\n\tprivate args: any[];\n\tprivate metadata: PinataMetadata | undefined;\n\tprivate keys: string | undefined;\n\tprivate peerAddresses: string[] | undefined;\n\tprivate version: 0 | 1 | undefined;\n\tprivate groupId: string | undefined;\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tuploadFunction: (\n\t\t\tconfig: PinataConfig | undefined,\n\t\t\t...args: any[]\n\t\t) => Promise<T>,\n\t\t...args: any[]\n\t) {\n\t\tthis.config = config;\n\t\tthis.uploadFunction = uploadFunction;\n\t\tthis.args = args;\n\t\tthis.version = 1;\n\t}\n\n\taddMetadata(metadata: PinataMetadata): UploadBuilder<T> {\n\t\tthis.metadata = metadata;\n\t\treturn this;\n\t}\n\n\tkey(jwt: string): UploadBuilder<T> {\n\t\tthis.keys = jwt;\n\t\treturn this;\n\t}\n\n\tcidVersion(v: 0 | 1): UploadBuilder<T> {\n\t\tthis.version = v;\n\t\treturn this;\n\t}\n\n\tgroup(groupId: string): UploadBuilder<T> {\n\t\tthis.groupId = groupId;\n\t\treturn this;\n\t}\n\n\tpeerAddress(peerAddresses: string[]): UploadBuilder<T> {\n\t\tthis.peerAddresses = peerAddresses;\n\t\treturn this;\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonfulfilled?:\n\t\t\t| ((value: T) => TResult1 | PromiseLike<TResult1>)\n\t\t\t| null\n\t\t\t| undefined,\n\t\tonrejected?:\n\t\t\t| ((reason: any) => TResult2 | PromiseLike<TResult2>)\n\t\t\t| null\n\t\t\t| undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\tconst options: UploadOptions = this.args[this.args.length - 1] || {};\n\t\tif (this.metadata) {\n\t\t\toptions.metadata = this.metadata;\n\t\t}\n\t\tif (this.keys) {\n\t\t\toptions.keys = this.keys;\n\t\t}\n\t\tif (this.groupId) {\n\t\t\toptions.groupId = this.groupId;\n\t\t}\n\t\tif (this.version) {\n\t\t\toptions.cidVersion = this.version;\n\t\t}\n\t\tif (this.peerAddresses && \"peerAddresses\" in options) {\n\t\t\toptions.peerAddresses = this.peerAddresses;\n\t\t}\n\t\tthis.args[this.args.length - 1] = options;\n\t\treturn this.uploadFunction(this.config, ...this.args).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n\nclass Upload {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tfile(file: FileObject, options?: UploadOptions): UploadBuilder<PinResponse> {\n\t\treturn new UploadBuilder(this.config, uploadFile, file, options);\n\t}\n\n\tfileArray(\n\t\tfiles: FileObject[],\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<PinResponse> {\n\t\treturn new UploadBuilder(this.config, uploadFileArray, files, options);\n\t}\n\n\tbase64(\n\t\tbase64String: string,\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<PinResponse> {\n\t\treturn new UploadBuilder(this.config, uploadBase64, base64String, options);\n\t}\n\n\turl(url: string, options?: UploadOptions): UploadBuilder<PinResponse> {\n\t\treturn new UploadBuilder(this.config, uploadUrl, url, options);\n\t}\n\n\tjson(data: object, options?: UploadOptions): UploadBuilder<PinResponse> {\n\t\treturn new UploadBuilder(this.config, uploadJson, data, options);\n\t}\n\n\tcid(\n\t\tcid: string,\n\t\toptions?: UploadCIDOptions,\n\t): UploadBuilder<PinByCIDResponse> {\n\t\treturn new UploadBuilder(this.config, uploadCid, cid, options);\n\t}\n}\n\nclass FilterFiles {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: PinListQuery = {};\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tcid(cid: string): FilterFiles {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tpinStart(date: string): FilterFiles {\n\t\tthis.query.pinStart = date;\n\t\treturn this;\n\t}\n\n\tpinEnd(date: string): FilterFiles {\n\t\tthis.query.pinEnd = date;\n\t\treturn this;\n\t}\n\n\tpinSizeMin(size: number): FilterFiles {\n\t\tthis.query.pinSizeMin = size;\n\t\treturn this;\n\t}\n\n\tpinSizeMax(size: number): FilterFiles {\n\t\tthis.query.pinSizeMax = size;\n\t\treturn this;\n\t}\n\n\tpageLimit(limit: number): FilterFiles {\n\t\tthis.query.pageLimit = limit;\n\t\treturn this;\n\t}\n\n\tpageOffset(offset: number): FilterFiles {\n\t\tthis.query.pageOffset = offset;\n\t\treturn this;\n\t}\n\n\tname(name: string): FilterFiles {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tgroup(groupId: string): FilterFiles {\n\t\tthis.query.groupId = groupId;\n\t\treturn this;\n\t}\n\n\tkeyValue(\n\t\tkey: string,\n\t\tvalue: string | number,\n\t\toperator?: PinListQuery[\"operator\"],\n\t): FilterFiles {\n\t\tthis.query.key = key;\n\t\tthis.query.value = value;\n\t\tif (operator) {\n\t\t\tthis.query.operator = operator;\n\t\t}\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: PinListItem[]) => any) | null): Promise<any> {\n\t\treturn listFiles(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<PinListItem, void, unknown> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\t\tconst limit = this.query.pageLimit || 10;\n\n\t\twhile (hasMore) {\n\t\t\tawait this.rateLimit(); // applying rate limit\n\t\t\tthis.query.pageOffset = offset;\n\t\t\tthis.query.pageLimit = limit;\n\n\t\t\tconst items = await listFiles(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<PinListItem[]> {\n\t\tconst allItems: PinListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n\nclass Gateways {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tget(cid: string): OptimizeImage {\n\t\treturn new OptimizeImage(this.config, cid);\n\t}\n\n\tconvert(url: string, gatewayPrefix?: string): Promise<string> {\n\t\treturn convertIPFSUrl(this.config, url, gatewayPrefix);\n\t}\n\n\tcontainsCID(cid: string): Promise<ContainsCIDResponse> {\n\t\treturn containsCID(cid);\n\t}\n\n\ttopUsageAnalytics(options: {\n\t\tdomain: string;\n\t\tstart: string;\n\t\tend: string;\n\t\tsortBy: \"requests\" | \"bandwidth\";\n\t\tattribute:\n\t\t\t| \"cid\"\n\t\t\t| \"country\"\n\t\t\t| \"region\"\n\t\t\t| \"user_agent\"\n\t\t\t| \"referer\"\n\t\t\t| \"file_name\";\n\t}): TopGatewayAnalyticsBuilder {\n\t\treturn new TopGatewayAnalyticsBuilder(\n\t\t\tthis.config,\n\t\t\toptions.domain,\n\t\t\toptions.start,\n\t\t\toptions.end,\n\t\t\toptions.sortBy,\n\t\t\toptions.attribute,\n\t\t);\n\t}\n\n\tdateIntervalAnalytics(options: {\n\t\tdomain: string;\n\t\tstart: string;\n\t\tend: string;\n\t\tinterval: \"day\" | \"week\";\n\t}): TimeIntervalGatewayAnalyticsBuilder {\n\t\treturn new TimeIntervalGatewayAnalyticsBuilder(\n\t\t\tthis.config,\n\t\t\toptions.domain,\n\t\t\toptions.start,\n\t\t\toptions.end,\n\t\t\toptions.interval,\n\t\t);\n\t}\n\n\tswapCid(options: SwapCidOptions): Promise<SwapCidResponse> {\n\t\treturn swapCid(this.config, options);\n\t}\n\n\tswapHistory(options: SwapHistoryOptions): Promise<SwapCidResponse[]> {\n\t\treturn swapHistory(this.config, options);\n\t}\n\n\tdeleteSwap(cid: string): Promise<string> {\n\t\treturn deleteSwap(this.config, cid);\n\t}\n}\n\nclass OptimizeImage {\n\tprivate config: PinataConfig | undefined;\n\tprivate cid: string;\n\tprivate options: OptimizeImageOptions = {};\n\n\tconstructor(config: PinataConfig | undefined, cid: string) {\n\t\tthis.config = config;\n\t\tthis.cid = cid;\n\t}\n\n\toptimizeImage(options: OptimizeImageOptions): OptimizeImage {\n\t\tthis.options = { ...this.options, ...options };\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: GetCIDResponse) => any) | null): Promise<any> {\n\t\treturn getCid(this.config, this.cid, this.options).then(onfulfilled);\n\t}\n}\n\nclass FilterPinJobs {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: PinJobQuery = {};\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tcid(cid: string): FilterPinJobs {\n\t\tthis.query.ipfs_pin_hash = cid;\n\t\treturn this;\n\t}\n\n\tstatus(\n\t\tstatus:\n\t\t\t| \"prechecking\"\n\t\t\t| \"retrieving\"\n\t\t\t| \"expired\"\n\t\t\t| \"over_free_limit\"\n\t\t\t| \"over_max_size\"\n\t\t\t| \"invalid_object\"\n\t\t\t| \"bad_host_node\",\n\t): FilterPinJobs {\n\t\tthis.query.status = status;\n\t\treturn this;\n\t}\n\n\tpageLimit(limit: number): FilterPinJobs {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tpageOffset(offset: number): FilterPinJobs {\n\t\tthis.query.offset = offset;\n\t\treturn this;\n\t}\n\n\tsort(sort: \"ASC\" | \"DSC\"): FilterPinJobs {\n\t\tthis.query.sort = sort;\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: PinJobItem[]) => any) | null): Promise<any> {\n\t\treturn pinJobs(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<PinJobItem, void, unknown> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\t\tconst limit = this.query.limit || 10;\n\n\t\twhile (hasMore) {\n\t\t\tawait this.rateLimit(); // applying rate limit\n\t\t\tthis.query.offset = offset;\n\t\t\tthis.query.limit = limit;\n\n\t\t\tconst items = await pinJobs(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<PinJobItem[]> {\n\t\tconst allItems: PinJobItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n\nclass Usage {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tpinnedFileCount(): Promise<number> {\n\t\treturn pinnedFileCount(this.config);\n\t}\n\n\ttotalStorageSize(): Promise<number> {\n\t\treturn totalStorageUsage(this.config);\n\t}\n}\n\nclass Keys {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: KeyOptions): Promise<KeyResponse> {\n\t\treturn createKey(this.config, options);\n\t}\n\n\tlist(): FilterKeys {\n\t\treturn new FilterKeys(this.config);\n\t}\n\n\trevoke(keys: string[]): Promise<RevokeKeyResponse[]> {\n\t\treturn revokeKeys(this.config, keys);\n\t}\n}\n\nclass FilterKeys {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: KeyListQuery = {};\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\toffset(offset: number): FilterKeys {\n\t\tthis.query.offset = offset;\n\t\treturn this;\n\t}\n\n\trevoked(revoked: boolean): FilterKeys {\n\t\tthis.query.revoked = revoked;\n\t\treturn this;\n\t}\n\n\tlimitedUse(limitedUse: boolean): FilterKeys {\n\t\tthis.query.limitedUse = limitedUse;\n\t\treturn this;\n\t}\n\n\texhausted(exhausted: boolean): FilterKeys {\n\t\tthis.query.exhausted = exhausted;\n\t\treturn this;\n\t}\n\n\tname(name: string): FilterKeys {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: KeyListItem[]) => any) | null): Promise<any> {\n\t\treturn listKeys(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<KeyListItem, void, unknown> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\n\t\twhile (hasMore) {\n\t\t\tawait this.rateLimit(); // applying rate limit\n\t\t\tthis.query.offset = offset;\n\n\t\t\tconst items = await listKeys(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<KeyListItem[]> {\n\t\tconst allItems: KeyListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n\nclass Groups {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: GroupOptions): Promise<GroupResponseItem> {\n\t\treturn createGroup(this.config, options);\n\t}\n\n\tlist(): FilterGroups {\n\t\treturn new FilterGroups(this.config);\n\t}\n\n\tget(options: GetGroupOptions): Promise<GroupResponseItem> {\n\t\treturn getGroup(this.config, options);\n\t}\n\n\taddCids(options: GroupCIDOptions): Promise<string> {\n\t\treturn addToGroup(this.config, options);\n\t}\n\n\tremoveCids(options: GroupCIDOptions): Promise<string> {\n\t\treturn removeFromGroup(this.config, options);\n\t}\n\n\tupdate(options: UpdateGroupOptions): Promise<GroupResponseItem> {\n\t\treturn updateGroup(this.config, options);\n\t}\n\n\tdelete(options: GetGroupOptions): Promise<string> {\n\t\treturn deleteGroup(this.config, options);\n\t}\n}\n\nclass FilterGroups {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: GroupQueryOptions = {};\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\toffset(offset: number): FilterGroups {\n\t\tthis.query.offset = offset;\n\t\treturn this;\n\t}\n\n\tname(nameContains: string): FilterGroups {\n\t\tthis.query.nameContains = nameContains;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): FilterGroups {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: GroupResponseItem[]) => any) | null,\n\t): Promise<GroupResponseItem[]> {\n\t\treturn listGroups(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<\n\t\tGroupResponseItem,\n\t\tvoid,\n\t\tunknown\n\t> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\n\t\twhile (hasMore) {\n\t\t\tawait this.rateLimit(); // applying rate limit\n\t\t\tthis.query.offset = offset;\n\n\t\t\tconst items = await listGroups(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<GroupResponseItem[]> {\n\t\tconst allItems: GroupResponseItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n\nclass Signatures {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tadd(options: SignatureOptions): Promise<SignatureResponse> {\n\t\treturn addSignature(this.config, options);\n\t}\n\n\tget(cid: string): Promise<SignatureResponse> {\n\t\treturn getSignature(this.config, cid);\n\t}\n\n\tdelete(cid: string): Promise<string> {\n\t\treturn removeSignature(this.config, cid);\n\t}\n}\n\nclass GatewayAnalyticsBuilder<T extends GatewayAnalyticsQuery, R> {\n\tprotected config: PinataConfig | undefined;\n\tprotected query: T;\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined, query: T) {\n\t\tthis.config = config;\n\t\tthis.query = query;\n\t}\n\n\tcid(cid: string): this {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tfileName(fileName: string): this {\n\t\tthis.query.file_name = fileName;\n\t\treturn this;\n\t}\n\n\tuserAgent(userAgent: string): this {\n\t\tthis.query.user_agent = userAgent;\n\t\treturn this;\n\t}\n\n\tcountry(country: string): this {\n\t\tthis.query.country = country;\n\t\treturn this;\n\t}\n\n\tregion(region: string): this {\n\t\tthis.query.region = region;\n\t\treturn this;\n\t}\n\n\treferer(referer: string): this {\n\t\tthis.query.referer = referer;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): this {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tsort(order: \"asc\" | \"desc\"): this {\n\t\tthis.query.sort_order = order;\n\t\treturn this;\n\t}\n\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tprotected async getAnalytics(): Promise<R> {\n\t\tawait this.rateLimit();\n\t\tthrow new Error(\"getAnalytics method must be implemented in derived class\");\n\t}\n\n\tthen(onfulfilled?: ((value: R) => any) | null): Promise<any> {\n\t\treturn this.getAnalytics().then(onfulfilled);\n\t}\n}\n\nclass TopGatewayAnalyticsBuilder extends GatewayAnalyticsBuilder<\n\tTopGatewayAnalyticsQuery,\n\tTopGatewayAnalyticsItem[]\n> {\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t\tsortBy: \"requests\" | \"bandwidth\",\n\t\tattribute:\n\t\t\t| \"cid\"\n\t\t\t| \"country\"\n\t\t\t| \"region\"\n\t\t\t| \"user_agent\"\n\t\t\t| \"referer\"\n\t\t\t| \"file_name\",\n\t) {\n\t\tsuper(config, {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tsort_by: sortBy,\n\t\t\tattribute: attribute,\n\t\t});\n\t}\n\n\tprotected async getAnalytics(): Promise<TopGatewayAnalyticsItem[]> {\n\t\treturn analyticsTopUsage(this.config, this.query);\n\t}\n\n\tasync all(): Promise<TopGatewayAnalyticsItem[]> {\n\t\treturn this.getAnalytics();\n\t}\n}\n\nclass TimeIntervalGatewayAnalyticsBuilder extends GatewayAnalyticsBuilder<\n\tTimeIntervalGatewayAnalyticsQuery,\n\tTimeIntervalGatewayAnalyticsResponse\n> {\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t\tdateInterval: \"day\" | \"week\",\n\t) {\n\t\tsuper(config, {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tdate_interval: dateInterval,\n\t\t});\n\t}\n\n\tsortBy(sortBy: \"requests\" | \"bandwidth\"): this {\n\t\tthis.query.sort_by = sortBy;\n\t\treturn this;\n\t}\n\n\tprotected async getAnalytics(): Promise<TimeIntervalGatewayAnalyticsResponse> {\n\t\treturn analyticsDateInterval(this.config, this.query);\n\t}\n\n\tasync all(): Promise<TimeIntervalGatewayAnalyticsResponse> {\n\t\treturn this.getAnalytics();\n\t}\n}\n"],"mappings":"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","names":["wait"]}